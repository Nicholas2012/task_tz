// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/Nicholas2012/task_tz/internal/storage"
)

// UsersRepository is an autogenerated mock type for the UsersRepository type
type UsersRepository struct {
	mock.Mock
}

type UsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersRepository) EXPECT() *UsersRepository_Expecter {
	return &UsersRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, login
func (_m *UsersRepository) Get(ctx context.Context, login string) (*storage.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*storage.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *storage.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UsersRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *UsersRepository_Expecter) Get(ctx interface{}, login interface{}) *UsersRepository_Get_Call {
	return &UsersRepository_Get_Call{Call: _e.mock.On("Get", ctx, login)}
}

func (_c *UsersRepository_Get_Call) Run(run func(ctx context.Context, login string)) *UsersRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersRepository_Get_Call) Return(_a0 *storage.User, _a1 error) *UsersRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*storage.User, error)) *UsersRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *UsersRepository) List(ctx context.Context) ([]storage.User, error) {
	ret := _m.Called(ctx)

	var r0 []storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]storage.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []storage.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type UsersRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UsersRepository_Expecter) List(ctx interface{}) *UsersRepository_List_Call {
	return &UsersRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *UsersRepository_List_Call) Run(run func(ctx context.Context)) *UsersRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersRepository_List_Call) Return(_a0 []storage.User, _a1 error) *UsersRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersRepository_List_Call) RunAndReturn(run func(context.Context) ([]storage.User, error)) *UsersRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, user
func (_m *UsersRepository) Save(ctx context.Context, user storage.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type UsersRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - user storage.User
func (_e *UsersRepository_Expecter) Save(ctx interface{}, user interface{}) *UsersRepository_Save_Call {
	return &UsersRepository_Save_Call{Call: _e.mock.On("Save", ctx, user)}
}

func (_c *UsersRepository_Save_Call) Run(run func(ctx context.Context, user storage.User)) *UsersRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User))
	})
	return _c
}

func (_c *UsersRepository_Save_Call) Return(_a0 error) *UsersRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersRepository_Save_Call) RunAndReturn(run func(context.Context, storage.User) error) *UsersRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUsersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersRepository creates a new instance of UsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersRepository(t mockConstructorTestingTNewUsersRepository) *UsersRepository {
	mock := &UsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
