// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	randomuser "github.com/Nicholas2012/task_tz/pkg/randomuser"
	mock "github.com/stretchr/testify/mock"
)

// Random is an autogenerated mock type for the Random type
type Random struct {
	mock.Mock
}

type Random_Expecter struct {
	mock *mock.Mock
}

func (_m *Random) EXPECT() *Random_Expecter {
	return &Random_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *Random) Get() (*randomuser.Response, error) {
	ret := _m.Called()

	var r0 *randomuser.Response
	var r1 error
	if rf, ok := ret.Get(0).(func() (*randomuser.Response, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *randomuser.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*randomuser.Response)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Random_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Random_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *Random_Expecter) Get() *Random_Get_Call {
	return &Random_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *Random_Get_Call) Run(run func()) *Random_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Random_Get_Call) Return(_a0 *randomuser.Response, _a1 error) *Random_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Random_Get_Call) RunAndReturn(run func() (*randomuser.Response, error)) *Random_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRandom interface {
	mock.TestingT
	Cleanup(func())
}

// NewRandom creates a new instance of Random. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRandom(t mockConstructorTestingTNewRandom) *Random {
	mock := &Random{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
