// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/Nicholas2012/task_tz/internal/storage"
)

// Users is an autogenerated mock type for the Users type
type Users struct {
	mock.Mock
}

type Users_Expecter struct {
	mock *mock.Mock
}

func (_m *Users) EXPECT() *Users_Expecter {
	return &Users_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx
func (_m *Users) List(ctx context.Context) ([]storage.User, error) {
	ret := _m.Called(ctx)

	var r0 []storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]storage.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []storage.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Users_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Users_Expecter) List(ctx interface{}) *Users_List_Call {
	return &Users_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *Users_List_Call) Run(run func(ctx context.Context)) *Users_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Users_List_Call) Return(_a0 []storage.User, _a1 error) *Users_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Users_List_Call) RunAndReturn(run func(context.Context) ([]storage.User, error)) *Users_List_Call {
	_c.Call.Return(run)
	return _c
}

// Random provides a mock function with given fields: ctx
func (_m *Users) Random(ctx context.Context) (storage.User, error) {
	ret := _m.Called(ctx)

	var r0 storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (storage.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) storage.User); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(storage.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users_Random_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Random'
type Users_Random_Call struct {
	*mock.Call
}

// Random is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Users_Expecter) Random(ctx interface{}) *Users_Random_Call {
	return &Users_Random_Call{Call: _e.mock.On("Random", ctx)}
}

func (_c *Users_Random_Call) Run(run func(ctx context.Context)) *Users_Random_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Users_Random_Call) Return(_a0 storage.User, _a1 error) *Users_Random_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Users_Random_Call) RunAndReturn(run func(context.Context) (storage.User, error)) *Users_Random_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUsers interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsers creates a new instance of Users. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsers(t mockConstructorTestingTNewUsers) *Users {
	mock := &Users{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
